[2025-05-12T10:15:30.123Z] DEBUG: Executing query: db.users.find({ "tags": "premium" }, { "tags.$": 1 })
[2025-05-12T10:15:31.456Z] INFO: Query returned 5 documents
[2025-05-12T10:16:45.789Z] DEBUG: Executing update: db.users.update({ "items.name": "Widget" }, { $set: { "items.$": { name: "Widget Pro", price: 29.99 } } })
[2025-05-12T10:17:12.345Z] INFO: Updated 3 documents

// These should NOT be detected as positional operator uses
[2025-05-12T10:20:00.123Z] DEBUG: Price displayed as $19.99 on the product page
[2025-05-12T10:21:15.456Z] INFO: Variable $count initialized with value 0
[2025-05-12T10:22:30.789Z] DEBUG: Function $getUser() called with parameters (id=12345)

// Other MongoDB operators (some supported, some not)
[2025-05-12T10:30:00.123Z] DEBUG: Executing query: db.orders.aggregate([
  { $match: { status: "completed" } },
  { $group: { _id: "$customer", total: { $sum: "$amount" } } },
  { $sort: { total: -1 } },
  { $limit: 10 }
])

[2025-05-12T10:35:00.456Z] DEBUG: Executing update: db.inventory.updateMany(
  { qty: { $lt: 50 } },
  { $push: { tags: "low-stock" } }
)

[2025-05-12T10:40:00.789Z] DEBUG: Executing query with projection: db.articles.find(
  { category: "technology" },
  { title: 1, content: 1, "comments.text": 1, "comments.$": 1, "tags": { $slice: 3 } }
)

// Complex query with multiple operators
[2025-05-12T10:45:00.123Z] DEBUG: Executing complex query: db.products.find({
  $and: [
    { price: { $gte: 10, $lte: 100 } },
    { categories: { $in: ["electronics", "gadgets"] } },
    { "reviews.rating": { $gt: 4 } }
  ]
})

// Update with positional operator in array update
[2025-05-12T10:50:00.456Z] DEBUG: Executing array update: db.students.updateOne(
  { "grades.class": "math" },
  { $set: { "grades.$.score": 95 } }
)

// Update with positional operator and other update operators
[2025-05-12T10:55:00.789Z] DEBUG: Executing complex update: db.inventory.updateOne(
  { "items.name": "paper" },
  { 
    $set: { "items.$.quantity": 200 },
    $currentDate: { lastModified: true },
    $push: { "items.$.tags": "office-supplies" }
  }
)

db.collection.updateOne(
   { myArray: [ 5, 8 ] },
   { $set: { "myArray.$[]": 10 } },
   { upsert: true }
)

db.collection.updateOne(
   { myArray: [ 0, 1 ] },
   { $set: { "myArray.$[element]": 2 } },
   { arrayFilters: [ { element: 0 } ], upsert: true }
)

